#!/bin/bash
# Shortcut for running ownClouds `occ` command when not logged in as {{ owncloud_app_user | default(__owncloud_app_user) }} user and sudo allows it.
# https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/occ_command.html

# {{ ansible_managed }}

set -o nounset -o pipefail -o errexit

# Environment variable `OC_PASS` is striped normally by `sudo`.
# `--preserve-env` would preserve all environment variables.
# This should be OK for this command.
# It seems to be impossible to set "env_keep" via the command line?
# Other possibility would be to configure it properly via Defaults!{{ owncloud_deploy_path }}/occ env_keep=OC_PASS


# The occ command should be invoked with PWD set to `owncloud__app_home` to avoid occ not finding itâ€™s DB spec:
# https://github.com/owncloud/core/issues/17583
# It is fixed in 8.2 but lets call `occ` like the documentation suggests it:
# https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/occ_command.html?highlight=occ#using-the-occ-command
cd '{{ owncloud_deploy_path }}' || exit 1

# Long command line options seem to be not supported as of 1.8.3 in Ubuntu precise.
# sudo --preserve-env --user '{{ owncloud_app_user | default(__owncloud_app_user) }}' {{ php_executable | default(__php_executable) }} --file '{{ owncloud_deploy_path }}/occ' "$@"
# {#
# Example cron entry:
# - name: 'owncloud-some-job'
#   cron_file: 'owncloud-something'
#   minute: 23
#   hour: 05
#   job: 'USER={{ owncloud_app_user | quote }} {{ some_script | quote }}'
#   user: '{{ owncloud_app_user | default(__owncloud_app_user) }}'
#
#}

{{ php_executable | default(__php_executable) }} --file '{{ owncloud_deploy_path }}/occ' "$@"
